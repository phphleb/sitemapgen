<?php

declare(strict_types=1);

namespace Phphleb\Sitemapgen\App;

use Phphleb\Sitemapgen\App\Helpers\DataHelper;

class CompoundXml
{
   const ATTENTION = '<!-- ATTENTION! This file is automatically generated. All changes will be lost on the next update. -->';

   private string $sitemapDirectory;

   private string $viewDirectory;

   private string $domain;

   public function __construct(string $sitemapDirectory, string $viewDirectory, string $domain)
   {
       $this->sitemapDirectory = rtrim($sitemapDirectory, '\\/') . DIRECTORY_SEPARATOR;
       $this->viewDirectory = rtrim($viewDirectory, '\\/') . DIRECTORY_SEPARATOR;
       $this->domain = rtrim($domain, '\\/');
   }

   public function createSitemapFile(array $urlParams = [], bool $isIndex = false, bool $addAttention = true, string $changefreq = 'weekly', float $priority = 0.9) {
       $dir = $this->viewDirectory . DIRECTORY_SEPARATOR . 'sitemapgen' . DIRECTORY_SEPARATOR;
       ob_start();
       require $dir . ($isIndex ? 'xml-list-content.php' : 'xml-content.php');
       $content = ob_get_contents();
       ob_end_clean();
       ob_start();
       require $dir . ($isIndex ? 'xml-list-header.php' : 'xml-header.php');
       echo PHP_EOL;
       if ($addAttention) {
           echo self::ATTENTION . PHP_EOL;
       }
       if ($urlParams) {
           $dh = new DataHelper();
           foreach ($urlParams as $param) {
               $params = $isIndex ?
                   [$dh->convertUrl($param['loc']), $param['lastmod']] :
                   [$dh->convertUrl($param['loc']), $param['lastmod'], $dh->changefreqValidateOrFile($changefreq), $priority];

               echo trim(sprintf($content, ...$params), '\n\r\t\v\x00') . PHP_EOL;
           }
       }
       require $dir . ($isIndex ? 'xml-list-footer.php' : 'xml-footer.php');
       $result = ob_get_contents();
       ob_end_clean();


       return $result;
   }

   public function createNewSitemap() {
       if (!file_exists($this->sitemapDirectory)) {
           throw new \ErrorException('The specified folder to place the `sitemap` file was not found!');
       }
       if (!file_exists($this->sitemapDirectory . 'sitemapgen')) {
           mkdir($this->sitemapDirectory . 'sitemapgen');
       }

       if (!file_exists($this->sitemapDirectory . 'sitemapgen' . DIRECTORY_SEPARATOR . 'sitemap-reserve.xml')) {
           $reserveSitemap = $this->createSitemapFile([['loc' => $this->domain, 'lastmod' => date("Y-m-d")]], false, false);
           file_put_contents($this->sitemapDirectory . 'sitemapgen' . DIRECTORY_SEPARATOR . 'sitemap-reserve.xml', $reserveSitemap);
       }
       if (!file_exists($this->sitemapDirectory . 'sitemapgen' . DIRECTORY_SEPARATOR . 'sitemap-generated.xml')) {
           $allSitemap = $this->createSitemapFile([], false, false);
           file_put_contents($this->sitemapDirectory . 'sitemapgen' . DIRECTORY_SEPARATOR . 'sitemap-generated.xml', $allSitemap);
       }
       if (!file_exists($this->sitemapDirectory . 'sitemapgen' . DIRECTORY_SEPARATOR . 'sitemap-default.xml')) {
           $defaultSitemap = $this->createSitemapFile([], false, false);
           file_put_contents($this->sitemapDirectory . 'sitemapgen' . DIRECTORY_SEPARATOR . 'sitemap-default.xml', $defaultSitemap);
       }
       if (!file_exists($this->sitemapDirectory . 'sitemap.xml')) {
           $indexSitemap = $this->createSitemapFile([
               ['loc' => $this->domain . '/sitemapgen/sitemap-reserve.xml', 'lastmod' => date("Y-m-d")],
               ['loc' => $this->domain . '/sitemapgen/sitemap-generated.xml', 'lastmod' => date("Y-m-d")],
               ], true);
           file_put_contents($this->sitemapDirectory . 'sitemap.xml', $indexSitemap);
       }
   }
}

